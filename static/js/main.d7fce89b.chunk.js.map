{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","placeholder","onChange","change","Result","weather","date","city","sunrise","description","sunset","temp","pressure","wind","error","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Math","round","weatherDescription","split","cloudWords","sunWords","rainWords","snowWords","stormWords","mistWords","i","length","includes","src","weatherImage","className","APIkey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","main","speed","sys","catch","err","prevState","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7fce89b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input type='text' value={props.value} placeholder='type city name' onChange={props.change}></input>\r\n      <button>Search</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './App.css'\r\n\r\nconst Result = props => {\r\n  const { date, city, sunrise, description, sunset, temp, pressure, wind, error } = props.weather\r\n  let content = null\r\n\r\n  if (!error && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    function weatherImage() {\r\n      if (description) {\r\n        const weatherDescription = description.split(' ');\r\n        const cloudWords = ['cloudy', 'clouds', 'overcast', 'cloud'];\r\n        const sunWords = ['sun', 'sunny', 'clear', 'clearly'];\r\n        const rainWords = ['rain', 'rainy'];\r\n        const snowWords = ['snow', 'snowy'];\r\n        const stormWords = ['storm', 'stormy'];\r\n        const mistWords = ['mist'];\r\n        for (let i = 0; i < weatherDescription.length; i++) {\r\n          if (cloudWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2012/04/18/13/22/cloud-37010_960_720.png' />\r\n          } else if (sunWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2013/07/13/12/12/sun-159392_960_720.png' />\r\n          } else if (rainWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2012/04/18/13/22/cloud-37011_960_720.png' />\r\n          } else if (snowWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2012/04/18/13/23/cloudy-37012_960_720.png' />\r\n          } else if (stormWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2013/04/01/09/22/thunderstorm-98541_960_720.png' />\r\n          }\r\n          else if (mistWords.includes(weatherDescription[i])) {\r\n            return <img src='https://cdn.pixabay.com/photo/2013/04/01/09/21/fog-98505_960_720.png' />\r\n          }\r\n        }\r\n      }\r\n    }\r\n    content = (\r\n      <>\r\n        <h2>Results for: <em>{city}</em> </h2>\r\n\r\n        <p>Conditions:{description}</p>\r\n        <p>Data for day and time: {date}</p>\r\n        <p>Actually temperature: {Math.round(temp)} &#176;C</p>\r\n        <p>Sunrise time: {sunriseTime}</p>\r\n        <p>Sunset time: {sunsetTime}</p>\r\n        <p>Wind speed: {wind} m/s</p>\r\n        <p>Pressure: {pressure} hPa</p>\r\n        {weatherImage()}\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <div className='result'>\r\n      {error ? `We don't have ${city} at database` : content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result'\nimport './App.css';\nconst APIkey = '30e14a2d16b4ef2e118490a52d02c246';\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    temp: '',\n    description: '',\n    wind: '',\n    pressure: '',\n    sunset: '',\n    sunrise: '',\n    error: false,\n  }\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n  handleCitySubmit = (e) => {\n    e.preventDefault()\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response\n        }\n        throw Error(\"Something's wrong\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n        this.setState(state => ({\n          error: false,\n          date: time,\n          city: state.value,\n          temp: data.main.temp,\n          description: data.weather[0].description,\n          wind: data.wind.speed,\n          pressure: data.main.pressure,\n          sunset: data.sys.sunset,\n          sunrise: data.sys.sunrise,\n        }))\n\n      }).catch(err => {\n        this.setState(prevState => ({\n          error: true,\n          city: prevState.value,\n        }))\n      })\n  }\n  render() {\n    return (\n      <div className='app'>\n        <h1>WEATHER APP</h1>\n        <Form change={this.handleInputChange} value={this.state.value} submit={this.handleCitySubmit} />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}